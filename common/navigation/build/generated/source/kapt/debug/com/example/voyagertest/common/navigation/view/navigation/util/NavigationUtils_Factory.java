// Generated by Dagger (https://dagger.dev).
package com.example.voyagertest.common.navigation.view.navigation.util;

import com.example.voyagertest.common.navigation.view.navigation.NavigationParameters;
import com.example.voyagertest.common.navigation.view.navigation.NavigationRoute;
import com.example.voyagertest.common.navigation.view.navigation.NavigationTarget;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.Map;
import javax.inject.Provider;

@ScopeMetadata("dagger.hilt.android.scopes.ActivityRetainedScoped")
@QualifierMetadata("com.example.voyagertest.common.navigation.di.DefaultNavigationTarget")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NavigationUtils_Factory implements Factory<NavigationUtils> {
  private final Provider<Map<NavigationRoute, NavigationTarget>> navigationTargetsProvider;

  private final Provider<NavigationRoute> defaultNavigationRouteProvider;

  private final Provider<NavigationParameters> defaultNavigationParametersProvider;

  public NavigationUtils_Factory(
      Provider<Map<NavigationRoute, NavigationTarget>> navigationTargetsProvider,
      Provider<NavigationRoute> defaultNavigationRouteProvider,
      Provider<NavigationParameters> defaultNavigationParametersProvider) {
    this.navigationTargetsProvider = navigationTargetsProvider;
    this.defaultNavigationRouteProvider = defaultNavigationRouteProvider;
    this.defaultNavigationParametersProvider = defaultNavigationParametersProvider;
  }

  @Override
  public NavigationUtils get() {
    return newInstance(navigationTargetsProvider.get(), defaultNavigationRouteProvider.get(), defaultNavigationParametersProvider.get());
  }

  public static NavigationUtils_Factory create(
      Provider<Map<NavigationRoute, NavigationTarget>> navigationTargetsProvider,
      Provider<NavigationRoute> defaultNavigationRouteProvider,
      Provider<NavigationParameters> defaultNavigationParametersProvider) {
    return new NavigationUtils_Factory(navigationTargetsProvider, defaultNavigationRouteProvider, defaultNavigationParametersProvider);
  }

  public static NavigationUtils newInstance(
      Map<NavigationRoute, NavigationTarget> navigationTargets,
      NavigationRoute defaultNavigationRoute, NavigationParameters defaultNavigationParameters) {
    return new NavigationUtils(navigationTargets, defaultNavigationRoute, defaultNavigationParameters);
  }
}
